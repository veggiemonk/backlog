[{"id":0,"href":"/backlog/cli/backlog/","title":"backlog","parent":"CLI Reference","content":" backlog Backlog is a git-native, markdown-based task manager.\nSynopsis A Git-native, Markdown-based task manager for developers and AI agents. Backlog helps you manage tasks within your git repository.\nbacklog [flags] Options Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. -h, --help Help for backlog. SEE ALSO backlog archive - Archive a task. backlog create - Create a new task. backlog edit - Edit an existing task. backlog list - List all tasks. backlog mcp - Start the MCP server. backlog search - Search tasks by content. backlog version - Print the version information. backlog view - View a task by providing its ID. ","description":" backlog Backlog is a git-native, markdown-based task manager.\nSynopsis A Git-native, Markdown-based task manager for developers and AI agents. Backlog helps you manage tasks within your git repository.\nbacklog [flags] Options Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. -h, --help Help for backlog. SEE ALSO backlog archive - Archive a task. backlog create - Create a new task. backlog edit - Edit an existing task. backlog list - List all tasks. backlog mcp - Start the MCP server. backlog search - Search tasks by content. backlog version - Print the version information. backlog view - View a task by providing its ID. "},{"id":1,"href":"/backlog/cli/backlog_create/","title":"backlog create","parent":"CLI Reference","content":" backlog create Create a new task.\nSynopsis Creates a new task in the backlog. You can specify everything from a simple title to a detailed set of requirements, assignees, and dependencies.\nbacklog create \u0026lt;title\u0026gt; [flags] Show Examples true Basic 1. Basic Task Creation The simplest way to create a task is with just a title.\n1 backlog create \u0026#34;Fix the login button styling\u0026#34; 2. Task with a Description Use the -d or --description flag to add more detail.\n1 backlog create \u0026#34;Implement password reset\u0026#34; -d \u0026#34;Users should be able to request a password reset link via their email.\u0026#34; ","description":" backlog create Create a new task.\nSynopsis Creates a new task in the backlog. You can specify everything from a simple title to a detailed set of requirements, assignees, and dependencies.\nbacklog create \u0026lt;title\u0026gt; [flags] Show Examples true Basic 1. Basic Task Creation The simplest way to create a task is with just a title.\n"},{"id":2,"href":"/backlog/development/analysis/","title":"Technical Analysis","parent":"Development","content":" Backlog Tool - Comprehensive Technical Analysis Executive Summary The backlog project is a well-architected, Go-based CLI tool for task management that is offline-first and developer-centric. Its core design principle is storing tasks as individual Markdown files within a Git repository, making it highly portable and transparent. The codebase demonstrates strong adherence to modern Go practices, including clean separation of concerns, dependency injection for testability, and a robust CLI implementation. A key feature is its built-in Model Context Protocol (MCP) server, which exposes its functionality to AI agents, positioning it as a forward-thinking tool for AI-assisted development workflows. While the current implementation is performant for small to medium-sized projects, its scalability is limited by the design choice of reading all task files into memory for certain operations.\n1. Project Architecture and Structure The project follows a standard and effective Go project layout, with a clear separation of concerns that enhances maintainability and testability.\nmain.go: The application\u0026rsquo;s entry point. It\u0026rsquo;s minimal and delegates all work to the internal/cmd package. It also includes a //go:generate directive to automate documentation generation. internal/: This directory contains all the core application logic, ensuring that no other project can import it and depend on its internal implementation details. core/: This is the heart of the application, containing the business logic and data structures. It defines the Task struct, the FileTaskStore for data persistence, and the logic for all CRUD (Create, Read, Update, Delete), search, and archive operations. It is completely decoupled from the CLI and any other presentation layer. cmd/: This package implements the command-line interface using the Cobra library. Each command (e.g., create, list, edit) is in its own file (task_create.go, task_list.go), which keeps the code organized. It acts as the presentation layer, translating user input into calls to the core package. commit/: This small package handles the Git integration. Its primary responsibility is to automatically commit changes to task files after an operation, providing a versioned history of the backlog. mcp/: This package implements the Model Context Protocol (MCP) server, exposing the core functionality as a set of tools for AI agents. This is a key architectural feature that separates human-computer interaction (CLI) from agent-computer interaction (MCP). logging/: A dedicated package for configuring and providing a global logger using Go\u0026rsquo;s standard log/slog library. It is configurable via environment variables. tools/: Contains utility programs for development, such as the documentation generator (docgen). This layered architecture is a significant strength, allowing each part of the system to be developed and tested independently.\n2. Core Functionality and Features The tool is rich with features designed for developers and AI agents:\nFile-Based Storage: Tasks are stored as human-readable Markdown files with YAML frontmatter. Git-Native: The entire state is stored within a Git repository, and task modifications are automatically committed. Hierarchical Tasks: Supports parent-child task relationships with a dot-notation ID system (e.g., T01, T01.01). Rich Metadata: Tasks support assignees, labels, priorities, dependencies, and acceptance criteria. Powerful CLI: A comprehensive CLI for all task management operations, with filtering, sorting, and multiple output formats (table, JSON, Markdown). AI Integration: An MCP server exposes all core functionality as tools (task_create, task_edit, etc.) for programmatic use by AI agents. Offline-First: Works entirely offline, with all data stored locally. 3. Code Quality and Patterns The codebase exhibits a high level of quality and adheres to modern Go idioms.\nDependency Injection The FileTaskStore is initialized with an afero.Fs interface. This is a prime example of dependency injection, allowing the filesystem to be replaced with an in-memory mock for testing.\nFile: internal/core/store.go\n1 2 3 4 5 6 7 // The store takes a filesystem interface, not a concrete implementation. func NewFileTaskStore(fs afero.Fs, tasksDir string) *FileTaskStore { return \u0026amp;FileTaskStore{ fs: fs, tasksDir: tasksDir, } } Interface-Driven Design The cmd package depends on a TaskStore interface, not the concrete FileTaskStore implementation. This decouples the CLI from the storage layer.\nFile: internal/cmd/root.go\n1 2 3 4 5 type TaskStore interface { Get(id string) (*core.Task, error) Create(params core.CreateTaskParams) (*core.Task, error) // ... and other methods } Custom Types for Type Safety The project uses custom types like TaskID, Status, and Priority instead of primitive strings. This improves type safety and allows for custom validation and behavior. The MaybeStringArray type is a clever solution for unmarshaling YAML fields that can be either a single string or a list of strings.\nFile: internal/core/task.go\n1 2 3 4 5 6 // Custom type for handling flexible string/[]string YAML fields. type MaybeStringArray []string func (a *MaybeStringArray) UnmarshalYAML(value *yaml.Node) error { // ... implementation } Clear Error Wrapping Errors are wrapped with context using fmt.Errorf(\u0026quot;...: %w\u0026quot;, err), which makes debugging easier.\nFile: internal/core/create.go\n1 2 3 if err != nil { return nil, fmt.Errorf(\u0026#34;could not get next task ID: %w\u0026#34;, err) } 4. Dependencies and Technologies Used The go.mod file reveals a carefully selected set of high-quality libraries:\ngithub.com/spf13/cobra: A powerful library for creating modern CLI applications. github.com/spf13/afero: A filesystem abstraction system that is crucial for the project\u0026rsquo;s testability. go.yaml.in/yaml/v4: Used for marshaling and unmarshaling the YAML frontmatter in task files. github.com/go-git/go-git/v6: A pure Go implementation of Git used for the automatic commit feature. github.com/modelcontextprotocol/go-sdk: The official Go SDK for building the MCP server. github.com/agnivade/levenshtein: Used for fuzzy string matching when parsing Status and Priority inputs, making the CLI more user-friendly. github.com/olekukonko/tablewriter: Used to render clean, formatted tables in the CLI output. 5. CLI Implementation Details The CLI is implemented cleanly in the internal/cmd package.\nCommand Structure root.go defines the root backlog command and persistent flags (--folder, --auto-commit). Each subcommand is in its own file (e.g., task_create.go).\nFlag Handling Flags are defined in init() functions and their values are captured into package-level variables. This is a standard Cobra pattern.\nContext for State Management The TaskStore instance is created in a PersistentPreRun function in root.go and passed to subcommand runners via the context.Context. This is an excellent way to provide shared dependencies to commands without using global variables.\nFile: internal/cmd/root.go\n1 2 3 4 5 6 7 8 9 func init() { // ... rootCmd.PersistentPreRun = func(cmd *cobra.Command, args []string) { // ... fs := afero.NewOsFs() var store TaskStore = core.NewFileTaskStore(fs, tasksDir) cmd.SetContext(context.WithValue(cmd.Context(), ctxKeyStore, store)) } } 6. Data Storage Mechanisms The storage mechanism is a core concept of the tool.\nDirectory: All tasks are stored in the .backlog/ directory by default. File Naming: Files follow the convention T{ID}-{slugified-title}.md (e.g., T01.01-add_google_oauth.md). The slug is generated from the task title. File Format: Each file is a Markdown document with a YAML frontmatter block. The frontmatter contains structured metadata like id, title, status, parent, labels, etc. The body is Markdown and contains sections for Description, Acceptance Criteria, Implementation Plan, and Implementation Notes. The task.Bytes() method in internal/core/task.go programmatically constructs this file content. 7. Task Management Features The tool supports a comprehensive set of task management features.\nHierarchical Tasks The TaskID type (internal/core/id.go) is an array of integers, naturally representing a hierarchy. The getNextTaskID function in internal/core/store.go contains the logic to find the next available ID at any level of the hierarchy.\nAcceptance Criteria (AC) The update_ac.go file contains a dedicated ACManager to handle adding, removing, checking, and unchecking AC items by index, which is a robust way to manage list-based modifications.\nDependencies Tasks can declare dependencies on other tasks via the dependencies field. The core.Create and core.Update functions validate that these dependencies exist.\n8. Error Handling and Logging Logging The internal/logging/config.go package provides a centralized logging setup using log/slog. It\u0026rsquo;s configurable via environment variables for level (BACKLOG_LOG_LEVEL), format (BACKLOG_LOG_FORMAT), and output file (BACKLOG_LOG_FILE), which is excellent for debugging.\nError Propagation Errors are generally handled at the cmd layer. The core functions return errors, and the command runners check for err != nil, log the error, and then call os.Exit(1). This is a standard and effective pattern for CLI tools.\n9. Testing Coverage The project has a strong testing culture.\nTest Infrastructure Makefile: The Makefile includes test and cover targets, making it easy to run tests and check coverage. Filesystem Mocking: The use of afero.NewMemMapFs() in test files (e.g., internal/core/create_test.go) is the cornerstone of the testing strategy. It allows the storage layer to be tested thoroughly and quickly without touching the actual disk. Test Structure: Tests are well-organized. For example, internal/cmd/task_list_test.go and task_search_test.go contain comprehensive table-driven tests covering many combinations of flags and filters. Assertion Library: github.com/matryer/is is used for assertions, leading to readable and concise test code. 10. Performance Considerations The primary performance consideration is the loadAll() method in internal/core/list.go.\nCurrent Approach For list and search operations, the tool reads every single task file in the .backlog directory into memory, parses it, and then performs filtering or searching.\nImpact This approach is simple and works well for hundreds of tasks. However, for a project with thousands of tasks, the I/O and parsing overhead on every command run would lead to noticeable latency.\n11. Security Aspects As a local CLI tool, the security attack surface is minimal. However, the following points are relevant:\nFile Path Sanitization: The slugRegex in internal/core/task.go sanitizes the task title before creating a filename, which helps prevent path traversal or other filename-based attacks. MCP Server: The MCP server (internal/cmd/mcp.go) binds to localhost by default when using HTTP transport. This is a secure default, as it prevents external network access. If a user were to expose this on a public interface, it would need to be secured. Command Injection: The commit package uses the go-git library, which is a pure Go implementation. This avoids calling the git executable directly and eliminates the risk of command injection vulnerabilities. 12. Areas for Improvement Performance Optimization To improve scalability, an index file (e.g., a single JSON or Gob file) could be maintained in the .backlog directory. This index would store essential metadata for all tasks. The list and search commands could read this single file instead of all individual task files, resorting to reading the full file only for view or edit operations. This would trade some of the \u0026ldquo;pure Markdown\u0026rdquo; simplicity for a significant performance gain.\nRefactor Shared CLI Flags The flags for filtering and sorting are duplicated across task_list.go and task_search.go. This logic could be extracted into a shared helper function to reduce code duplication and ensure consistency.\nConsolidate Utility Functions The ptr helper function is defined in multiple places (internal/core/archive.go, internal/cmd/helpers_test.go, etc.). It should be moved to a common internal utility package.\nInteractive Edit Mode The edit command could be greatly enhanced by launching a TUI (Terminal User Interface) form, allowing the user to edit all fields of a task in an interactive session.\n13. Technical Debt The codebase is remarkably clean and appears to have very little technical debt. The documentation is thorough, the code is well-commented where necessary, and the architecture is sound. The aforementioned duplication of CLI flags is a minor form of technical debt but is easily addressable. The project\u0026rsquo;s extensive use of its own backlog system for task management (as seen in the .backlog directory) is a testament to its quality and a great example of \u0026ldquo;dogfooding\u0026rdquo;.\n14. Scalability Considerations The primary scalability bottleneck is the file-based storage model combined with the loadAll() pattern.\nCurrent Limitation The system will likely perform well up to a few thousand tasks. Beyond that, the latency of reading and parsing thousands of files on every list or search command will become prohibitive.\nScaling Path If massive scale were a requirement, the TaskStore interface provides the perfect abstraction point. A new implementation (e.g., SqliteTaskStore) could be created to use a more scalable backend like SQLite. This would require a migration path but could be done without changing the cmd or mcp layers, demonstrating the strength of the current architecture. However, this would be a fundamental departure from the project\u0026rsquo;s core \u0026ldquo;files in Git\u0026rdquo; philosophy.\nConclusion The backlog tool represents an excellent example of modern Go development practices. Its architecture is clean, its testing is comprehensive, and its feature set is well-designed for its target audience of developers. The integration of MCP for AI agent interaction is particularly forward-thinking. While there are opportunities for performance optimization and feature enhancements, the current implementation provides a solid foundation that balances simplicity, functionality, and maintainability. The project successfully achieves its goal of being a transparent, Git-native task management tool that developers can understand, modify, and extend.\n","description":" Backlog Tool - Comprehensive Technical Analysis Executive Summary The backlog project is a well-architected, Go-based CLI tool for task management that is offline-first and developer-centric. Its core design principle is storing tasks as individual Markdown files within a Git repository, making it highly portable and transparent. The codebase demonstrates strong adherence to modern Go practices, including clean separation of concerns, dependency injection for testability, and a robust CLI implementation. A key feature is its built-in Model Context Protocol (MCP) server, which exposes its functionality to AI agents, positioning it as a forward-thinking tool for AI-assisted development workflows. While the current implementation is performant for small to medium-sized projects, its scalability is limited by the design choice of reading all task files into memory for certain operations.\n"},{"id":3,"href":"/backlog/cli/backlog_list/","title":"backlog list","parent":"CLI Reference","content":" backlog list List all tasks.\nSynopsis Lists all tasks in the backlog except for archived tasks. Provides powerful filtering and sorting options to help you find exactly what you\u0026rsquo;re looking for.\nbacklog list [flags] Show Examples true Filtering Filtering by Metadata 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # List tasks with status \u0026#34;todo\u0026#34; backlog list --status \u0026#34;todo\u0026#34; # List tasks with status \u0026#34;todo\u0026#34; or \u0026#34;in-progress\u0026#34; backlog list --status \u0026#34;todo,in-progress\u0026#34; # List sub-tasks of task \u0026#34;T12\u0026#34; backlog list --parent \u0026#34;T12\u0026#34; # List tasks assigned to alice backlog list --assigned \u0026#34;alice\u0026#34; # List tasks that have no one assigned backlog list --unassigned # List tasks with the \u0026#34;bug\u0026#34; label backlog list --labels \u0026#34;bug\u0026#34; # List all high priority tasks backlog list --priority \u0026#34;high\u0026#34; ","description":" backlog list List all tasks.\nSynopsis Lists all tasks in the backlog except for archived tasks. Provides powerful filtering and sorting options to help you find exactly what you\u0026rsquo;re looking for.\nbacklog list [flags] Show Examples true Filtering Filtering by Metadata 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # List tasks with status \u0026#34;todo\u0026#34; backlog list --status \u0026#34;todo\u0026#34; # List tasks with status \u0026#34;todo\u0026#34; or \u0026#34;in-progress\u0026#34; backlog list --status \u0026#34;todo,in-progress\u0026#34; # List sub-tasks of task \u0026#34;T12\u0026#34; backlog list --parent \u0026#34;T12\u0026#34; # List tasks assigned to alice backlog list --assigned \u0026#34;alice\u0026#34; # List tasks that have no one assigned backlog list --unassigned # List tasks with the \u0026#34;bug\u0026#34; label backlog list --labels \u0026#34;bug\u0026#34; # List all high priority tasks backlog list --priority \u0026#34;high\u0026#34; "},{"id":4,"href":"/backlog/development/plan/","title":"Project Plan","parent":"Development","content":" GitHub Pages Documentation Website Plan Overview Create a small documentation website hosted on GitHub Pages to present all the backlog project documentation in an organized, searchable format.\nWebsite Structure \u0026amp; Navigation Main Navigation Home - Project overview and quick start Getting Started - Installation and basic usage CLI Reference - Auto-generated command documentation AI Integration - MCP server setup and usage Development - Architecture, analysis, and contribution guide About - Project inspiration and credits Content Organization content/ ├── _index.md # Home page (from README.md) ├── getting-started.md # Quick start guide ├── cli/ # CLI reference (existing) │ ├── _index.md │ ├── backlog.md │ ├── backlog_create.md │ └── ... (other CLI docs) ├── ai-integration.md # MCP integration guide ├── development/ # Development docs │ ├── _index.md │ ├── architecture.md │ ├── analysis.md # Existing technical analysis │ └── plan.md # Existing project plan └── about.md # Project background Technical Approach Static Site Generator: Hugo Why Hugo: Fast builds, excellent GitHub Pages support, powerful theming Theme: Use a clean, documentation-focused theme (Docsy, Book, or Geekdoc) Features: Built-in search, syntax highlighting, mobile-responsive, taxonomies Implementation Steps Initialize Hugo site with hugo.toml configuration Select and configure a documentation theme Create content structure and organize existing documentation Set up GitHub Actions for automated deployment Configure custom domain and search functionality Key Features Automatic CLI docs: Integrate existing CLI documentation Built-in search: Hugo\u0026rsquo;s native search functionality Mobile responsive: Modern, accessible design Lightning fast: Sub-second build times Easy maintenance: Markdown-based content with front matter Task Breakdown T15 - GitHub Pages Documentation Website Priority: High Labels: documentation, website, github-pages, hugo Description: Create a small documentation website hosted on GitHub Pages to present all the backlog project documentation in an organized, searchable format for both human users and AI agents.\nAcceptance Criteria:\nWebsite is accessible via GitHub Pages URL All existing documentation is properly integrated Navigation is intuitive and complete Site is mobile responsive Search functionality works correctly T15.01 - Hugo Site Configuration Priority: High Labels: hugo, configuration, setup Description: Initialize Hugo site with proper configuration and theme setup for GitHub Pages deployment.\nAcceptance Criteria:\nhugo.toml configured with site metadata and settings Documentation theme selected and installed (Docsy, Book, or Geekdoc) Basic site structure established with content/ directory Theme customization and branding applied Local development environment works (hugo server) T15.02 - Content Organization and Migration Priority: High Labels: content, migration, documentation Description: Organize existing documentation content into the new Hugo site structure and create missing content pages.\nAcceptance Criteria:\nREADME.md content migrated to content/_index.md homepage CLI documentation integrated from docs/cli/ with proper front matter Technical analysis and plan moved to development section Getting started guide created with Hugo shortcodes AI integration guide created with code examples About page created with project background T15.03 - Theme Customization and Navigation Priority: Medium Labels: themes, navigation, ui, branding Description: Customize Hugo theme for consistent branding and create intuitive navigation structure.\nAcceptance Criteria:\nSite navigation configured in hugo.toml or menu files Custom CSS/SCSS for branding and styling Responsive design tested on mobile and desktop Logo and favicon added to site Footer with project links and credits T15.04 - Search and Interactive Features Priority: Medium Labels: search, interactivity, user-experience Description: Implement search functionality and interactive elements to enhance user experience.\nAcceptance Criteria:\nSearch functionality configured (Fuse.js, Algolia, or built-in) Search index includes all content including CLI docs Search results page with proper formatting Code copy buttons and syntax highlighting working Table of contents generation for long pages T15.05 - GitHub Pages Deployment Priority: High Labels: deployment, github-pages, automation, ci-cd Description: Configure GitHub Actions workflow for automated Hugo site deployment to GitHub Pages.\nAcceptance Criteria:\nGitHub Actions workflow created for Hugo builds Workflow triggers on pushes to main branch and documentation changes Hugo extended version used for SCSS processing Site deploys automatically with proper base URL configuration Custom domain configured (if desired) T15.06 - Content Enhancement and SEO Priority: Low Labels: content, seo, performance, user-experience Description: Enhance content with better formatting, SEO optimization, and performance improvements.\nAcceptance Criteria:\nSEO meta tags and Open Graph data configured Site performance optimized (images, CSS, JS minification) Analytics integration (if desired) Sitemap and robots.txt generation Cross-references and internal linking between pages Hugo Configuration Structure hugo.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 baseURL = \u0026#39;https://veggiemonk.github.io/backlog\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;Backlog Documentation\u0026#39; theme = \u0026#39;docsy\u0026#39; [params] github_repo = \u0026#39;https://github.com/veggiemonk/backlog\u0026#39; github_branch = \u0026#39;main\u0026#39; edit_page = true search_enabled = true [markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true [markup.highlight] style = \u0026#39;github\u0026#39; lineNos = true [[menu.main]] name = \u0026#34;Home\u0026#34; url = \u0026#34;/\u0026#34; weight = 10 [[menu.main]] name = \u0026#34;Getting Started\u0026#34; url = \u0026#34;/getting-started/\u0026#34; weight = 20 [[menu.main]] name = \u0026#34;CLI Reference\u0026#34; url = \u0026#34;/cli/\u0026#34; weight = 30 Content Structure with Front Matter 1 2 3 4 5 6 7 8 9 --- title: \u0026#34;Getting Started\u0026#34; description: \u0026#34;Quick start guide for Backlog\u0026#34; weight: 20 --- # Getting Started Your content here... GitHub Actions Workflow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name: Deploy Hugo site to GitHub Pages on: push: branches: [\u0026#34;main\u0026#34;] paths: [\u0026#34;content/**\u0026#34;, \u0026#34;hugo.toml\u0026#34;, \u0026#34;.github/workflows/hugo.yml\u0026#34;] workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 Success Metrics Website loads in under 1 second All documentation is accessible and well-organized Users can easily find CLI command information AI agents can reference the documentation effectively Site works well on mobile devices Search returns relevant results quickly Build time is under 30 seconds Hugo Advantages Over Jekyll Speed: Hugo builds sites 10-100x faster than Jekyll Single Binary: No Ruby dependencies or gem management Built-in Features: Search, image processing, taxonomies included Modern Themes: Better selection of documentation themes Shortcodes: Powerful content templating system Asset Pipeline: Built-in SCSS/PostCSS processing Multilingual: Native support for multiple languages This Hugo-based approach will provide a faster, more maintainable, and feature-rich documentation website while still leveraging GitHub Pages for hosting.\n","description":" GitHub Pages Documentation Website Plan Overview Create a small documentation website hosted on GitHub Pages to present all the backlog project documentation in an organized, searchable format.\nWebsite Structure \u0026amp; Navigation Main Navigation Home - Project overview and quick start Getting Started - Installation and basic usage CLI Reference - Auto-generated command documentation AI Integration - MCP server setup and usage Development - Architecture, analysis, and contribution guide About - Project inspiration and credits Content Organization content/ ├── _index.md # Home page (from README.md) ├── getting-started.md # Quick start guide ├── cli/ # CLI reference (existing) │ ├── _index.md │ ├── backlog.md │ ├── backlog_create.md │ └── ... (other CLI docs) ├── ai-integration.md # MCP integration guide ├── development/ # Development docs │ ├── _index.md │ ├── architecture.md │ ├── analysis.md # Existing technical analysis │ └── plan.md # Existing project plan └── about.md # Project background Technical Approach Static Site Generator: Hugo Why Hugo: Fast builds, excellent GitHub Pages support, powerful theming Theme: Use a clean, documentation-focused theme (Docsy, Book, or Geekdoc) Features: Built-in search, syntax highlighting, mobile-responsive, taxonomies Implementation Steps Initialize Hugo site with hugo.toml configuration Select and configure a documentation theme Create content structure and organize existing documentation Set up GitHub Actions for automated deployment Configure custom domain and search functionality Key Features Automatic CLI docs: Integrate existing CLI documentation Built-in search: Hugo\u0026rsquo;s native search functionality Mobile responsive: Modern, accessible design Lightning fast: Sub-second build times Easy maintenance: Markdown-based content with front matter Task Breakdown T15 - GitHub Pages Documentation Website Priority: High Labels: documentation, website, github-pages, hugo Description: Create a small documentation website hosted on GitHub Pages to present all the backlog project documentation in an organized, searchable format for both human users and AI agents.\n"},{"id":5,"href":"/backlog/cli/backlog_edit/","title":"backlog edit","parent":"CLI Reference","content":" backlog edit Edit an existing task.\nSynopsis Edit an existing task by providing its ID and flags for the fields to update. This allows for partial updates, so you only change what you need.\nbacklog edit \u0026lt;id\u0026gt; [flags] Show Examples true Basic Edits 1. Changing the Title Use -t or --title to rename the task.\n1 backlog edit T42 -t \u0026#34;Fix the main login button styling\u0026#34; 2. Updating the Description Use -d or --description to replace the description.\n1 backlog edit T42 -d \u0026#34;The login button is misaligned on mobile. It should be centered.\u0026#34; 3. Changing the Status Update progress with -s or --status.\n1 backlog edit T42 -s \u0026#34;in-progress\u0026#34; ","description":" backlog edit Edit an existing task.\nSynopsis Edit an existing task by providing its ID and flags for the fields to update. This allows for partial updates, so you only change what you need.\nbacklog edit \u0026lt;id\u0026gt; [flags] Show Examples true Basic Edits 1. Changing the Title Use -t or --title to rename the task.\n"},{"id":6,"href":"/backlog/cli/backlog_view/","title":"backlog view","parent":"CLI Reference","content":" backlog view View a task by providing its ID.\nSynopsis Displays the full details of a single task, including its title, description, metadata, and acceptance criteria. You can choose to output in standard markdown or JSON format.\nbacklog view \u0026lt;id\u0026gt; [flags] Examples 1 2 3 4 5 6 7 8 # View task T01 in the default markdown format backlog view T01 # View task T01 in JSON format backlog view T01 --json # View task T01 in JSON format (short flag) backlog view T01 -j Options Flag Description -h, --help Help for view. -j, --json Print JSON output. Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. ","description":" backlog view View a task by providing its ID.\nSynopsis Displays the full details of a single task, including its title, description, metadata, and acceptance criteria. You can choose to output in standard markdown or JSON format.\nbacklog view \u0026lt;id\u0026gt; [flags] Examples 1 2 3 4 5 6 7 8 # View task T01 in the default markdown format backlog view T01 # View task T01 in JSON format backlog view T01 --json # View task T01 in JSON format (short flag) backlog view T01 -j Options Flag Description -h, --help Help for view. -j, --json Print JSON output. Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. "},{"id":7,"href":"/backlog/cli/backlog_search/","title":"backlog search","parent":"CLI Reference","content":" backlog search Search tasks by content.\nSynopsis Performs a full-text search for tasks containing the specified query string. The search covers titles, descriptions, comments, and other fields.\nbacklog search \u0026lt;query\u0026gt; [flags] Show Examples true 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Search for tasks containing \u0026#34;login\u0026#34; in any field backlog search \u0026#34;login\u0026#34; # Search for tasks assigned to a specific person backlog search \u0026#34;@john\u0026#34; # Search for tasks with specific labels backlog search \u0026#34;frontend\u0026#34; # Search with markdown output backlog search \u0026#34;api\u0026#34; --markdown # Search with JSON output backlog search \u0026#34;api\u0026#34; --json Options In addition to the query, you can use the same filtering and sorting flags available in the list command.\nFlag Description -a, --assigned Filter tasks by assigned names. -d, --depended-on Filter tasks that are depended on by other tasks. -c, --has-dependency Include tasks that have dependencies. -h, --help Help for search. -e, --hide-extra Hide extra fields (labels, priority, assigned). -j, --json Print JSON output. -l, --labels Filter tasks by labels. -m, --markdown Print markdown table. -p, --parent Filter tasks by parent ID. -r, --reverse Reverse the order of tasks. --sort Sort tasks by comma-separated fields. -s, --status Filter tasks by status. -u, --unassigned List tasks that have no one assigned. Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. backlog list - For more advanced filtering without a search query. ","description":" backlog search Search tasks by content.\nSynopsis Performs a full-text search for tasks containing the specified query string. The search covers titles, descriptions, comments, and other fields.\nbacklog search \u0026lt;query\u0026gt; [flags] Show Examples true 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Search for tasks containing \u0026#34;login\u0026#34; in any field backlog search \u0026#34;login\u0026#34; # Search for tasks assigned to a specific person backlog search \u0026#34;@john\u0026#34; # Search for tasks with specific labels backlog search \u0026#34;frontend\u0026#34; # Search with markdown output backlog search \u0026#34;api\u0026#34; --markdown # Search with JSON output backlog search \u0026#34;api\u0026#34; --json Options In addition to the query, you can use the same filtering and sorting flags available in the list command.\n"},{"id":8,"href":"/backlog/cli/backlog_archive/","title":"backlog archive","parent":"CLI Reference","content":" backlog archive Archive a task.\nSynopsis Archives a task, moving it to the archived directory and marking its status as archived. This is the best way to clean up your board without losing history.\nbacklog archive \u0026lt;task-id\u0026gt; [flags] Tip You can use a partial ID to identify the task, as long as it\u0026rsquo;s unique. For example, backlog archive T01 is equivalent to backlog archive T01-some_title.md. Options Flag Description -h, --help Help for archive. Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. ","description":" backlog archive Archive a task.\nSynopsis Archives a task, moving it to the archived directory and marking its status as archived. This is the best way to clean up your board without losing history.\nbacklog archive \u0026lt;task-id\u0026gt; [flags] Tip You can use a partial ID to identify the task, as long as it\u0026rsquo;s unique. For example, backlog archive T01 is equivalent to backlog archive T01-some_title.md. Options Flag Description -h, --help Help for archive. Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. "},{"id":9,"href":"/backlog/cli/backlog_mcp/","title":"backlog mcp","parent":"CLI Reference","content":" backlog mcp Start the MCP server.\nSynopsis Starts a Model-Context-Protocol (MCP) server to provide programmatic, tool-based access to your backlog. This is essential for integrating with AI agents.\nThe server can run in two modes:\nstdio: Communicates over standard input/output. This is the default. http: Communicates over HTTP. backlog mcp [flags] Examples 1 2 3 4 5 6 7 8 # Start the MCP server using stdio transport (default) backlog mcp # Start the MCP server using HTTP transport on the default port (8106) backlog mcp --http # Start the MCP server using HTTP on a custom port backlog mcp --http --port 4321 Options Flag Default Description -h, --help Help for mcp. --http Use HTTP transport instead of stdio. --port 8106 Port for the MCP server (HTTP transport). Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. ","description":" backlog mcp Start the MCP server.\nSynopsis Starts a Model-Context-Protocol (MCP) server to provide programmatic, tool-based access to your backlog. This is essential for integrating with AI agents.\nThe server can run in two modes:\nstdio: Communicates over standard input/output. This is the default. http: Communicates over HTTP. backlog mcp [flags] Examples 1 2 3 4 5 6 7 8 # Start the MCP server using stdio transport (default) backlog mcp # Start the MCP server using HTTP transport on the default port (8106) backlog mcp --http # Start the MCP server using HTTP on a custom port backlog mcp --http --port 4321 Options Flag Default Description -h, --help Help for mcp. --http Use HTTP transport instead of stdio. --port 8106 Port for the MCP server (HTTP transport). Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. "},{"id":10,"href":"/backlog/cli/backlog_version/","title":"backlog version","parent":"CLI Reference","content":" backlog version Print the version information.\nSynopsis Prints detailed version information for the backlog CLI, including the Git revision, version number, and build time. This is useful for bug reports and checking your installation.\nbacklog version [flags] Example 1 backlog version Example output:\nBacklog version: Revision: 7c989dabd2c61a063a23788c18eb39eca408f6a7 Version: v0.0.2-0.20250907193624-7c989dabd2c6 BuildTime: 2025-09-07T19:36:24Z Dirty: false Options Flag Description -h, --help Help for version. Inherited Options ↕ Flag Default Description --auto-commit true Auto-committing changes to git repository. --folder .backlog Directory for backlog tasks. SEE ALSO backlog - The main backlog command. ","description":" backlog version Print the version information.\nSynopsis Prints detailed version information for the backlog CLI, including the Git revision, version number, and build time. This is useful for bug reports and checking your installation.\nbacklog version [flags] Example 1 backlog version Example output:\n"},{"id":11,"href":"/backlog/getting-started/","title":"Getting Started","parent":"Backlog","content":" Getting Started This guide will help you get up and running with Backlog quickly.\nInstallation From Source 1 2 3 git clone https://github.com/veggiemonk/backlog cd backlog go build . Go Install 1 go install github.com/veggiemonk/backlog@latest Download Binary Download the latest binary from the releases page. First Steps Tip No initialization is required! Backlog works immediately in any directory. Create Your First Task 1 backlog create \u0026#34;Set up project documentation\u0026#34; This creates a task file at .backlog/T01-set_up_project_documentation.md.\nView Your Tasks 1 backlog list View Task Details 1 backlog view T01 Working with Tasks Creating Tasks with Metadata Simple Task Creation ↕ 1 2 3 4 # Task with description and priority backlog create \u0026#34;Implement user authentication\u0026#34; \\ -d \u0026#34;Add login and registration functionality\u0026#34; \\ --priority \u0026#34;high\u0026#34; Task with Assignees and Labels ↕ 1 2 3 backlog create \u0026#34;Update dependencies\u0026#34; \\ -a \u0026#34;alex\u0026#34; -a \u0026#34;jordan\u0026#34; \\ -l \u0026#34;maintenance,backend,security\u0026#34; Task with Acceptance Criteria ↕ 1 2 3 4 5 backlog create \u0026#34;Build reporting feature\u0026#34; \\ -d \u0026#34;Create monthly performance reports in PDF format\u0026#34; \\ --ac \u0026#34;Report generation logic is accurate\u0026#34; \\ --ac \u0026#34;Users can select date range\u0026#34; \\ --ac \u0026#34;PDF export works correctly\u0026#34; Hierarchical Tasks Create subtasks by specifying a parent:\n1 2 3 4 5 6 7 8 9 10 11 # Create parent task backlog create \u0026#34;Implement User Authentication\u0026#34; # → Creates T01-implement_user_authentication.md # Create subtask backlog create \u0026#34;Add Google OAuth login\u0026#34; -p \u0026#34;T01\u0026#34; # → Creates T01.01-add_google_oauth_login.md # Create sub-subtask backlog create \u0026#34;OAuth token validation\u0026#34; -p \u0026#34;T01.01\u0026#34; # → Creates T01.01.01-oauth_token_validation.md Managing Tasks Update Status 1 backlog edit T01 --status \u0026#34;in-progress\u0026#34; Add Assignee 1 backlog edit T01 --add-assignee \u0026#34;alex\u0026#34; Add Labels 1 backlog edit T01 --add-label \u0026#34;urgent\u0026#34; --add-label \u0026#34;frontend\u0026#34; Complete Acceptance Criteria 1 backlog edit T01 --check-ac 1,3 Filtering and Searching By Status 1 2 backlog list --status \u0026#34;todo\u0026#34; backlog list --status \u0026#34;in-progress\u0026#34; By Assignee 1 backlog list --assignee \u0026#34;alex\u0026#34; By Parent 1 2 # Show subtasks backlog list --parent \u0026#34;T01\u0026#34; Search Content 1 backlog search \u0026#34;authentication\u0026#34; File Structure Tasks are stored as Markdown files in the .backlog/ directory:\n.backlog/ ├── T01-implement_user_auth.md # Root task ├── T01.01-setup_oauth.md # Subtask ├── T01.01.01-google_oauth.md # Sub-subtask ├── T02-frontend_redesign.md # Another root task └── archived/ # Archived tasks └── T03-completed_feature.md Each task file contains YAML frontmatter with metadata and Markdown content:\nDetails 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 --- id: \u0026#34;01.02\u0026#34; title: \u0026#34;Setup OAuth integration\u0026#34; status: \u0026#34;todo\u0026#34; parent: \u0026#34;01\u0026#34; assigned: [\u0026#34;alex\u0026#34;] labels: [\u0026#34;feature\u0026#34;, \u0026#34;auth\u0026#34;] priority: \u0026#34;high\u0026#34; created_at: 2024-01-01T00:00:00Z updated_at: 2024-01-01T00:00:00Z --- ## Description Set up OAuth integration with Google and GitHub providers. ## Acceptance Criteria \u0026lt;!-- AC:BEGIN --\u0026gt; - [ ] #1 Google OAuth integration works - [ ] #2 GitHub OAuth integration works - [x] #3 OAuth scope validation implemented \u0026lt;!-- AC:END --\u0026gt; ## Implementation Notes - Use oauth2 package for Go - Store tokens securely Git Integration Note Backlog automatically commits changes to your Git repository: 1 2 3 4 5 6 7 # After creating a task git log -1 --oneline # create: T01 Set up project documentation # After updating a task git log -1 --oneline # update: T01 moved to in-progress, assigned alex Next Steps CLI Reference AI Integration Development Guide ","description":" Getting Started This guide will help you get up and running with Backlog quickly.\nInstallation From Source 1 2 3 git clone https://github.com/veggiemonk/backlog cd backlog go build . Go Install 1 go install github.com/veggiemonk/backlog@latest Download Binary Download the latest binary from the releases page. First Steps Tip No initialization is required! Backlog works immediately in any directory. Create Your First Task 1 backlog create \u0026#34;Set up project documentation\u0026#34; This creates a task file at .backlog/T01-set_up_project_documentation.md.\n"},{"id":12,"href":"/backlog/cli/","title":"CLI Reference","parent":"Backlog","content":" CLI Reference Complete command-line interface documentation for the backlog tool.\nOverview Backlog provides a comprehensive CLI for managing tasks with the following commands:\nCore Commands backlog - Main command with global options backlog create - Create new tasks backlog list - List and filter tasks backlog view - View task details backlog edit - Edit existing tasks Additional Commands backlog search - Search tasks by content backlog archive - Archive completed tasks backlog mcp - Start MCP server for AI agents backlog version - Show version information Quick Examples Create Tasks Simple Task 1 backlog create \u0026#34;Fix login bug\u0026#34; With Metadata 1 2 3 4 5 6 7 backlog create \u0026#34;Implement OAuth\u0026#34; \\ -d \u0026#34;Add Google and GitHub OAuth support\u0026#34; \\ -a \u0026#34;alice,bob\u0026#34; \\ -l \u0026#34;auth,feature\u0026#34; \\ --priority \u0026#34;high\u0026#34; \\ --ac \u0026#34;Google OAuth works\u0026#34; \\ --ac \u0026#34;GitHub OAuth works\u0026#34; Subtask 1 backlog create \u0026#34;OAuth token validation\u0026#34; -p \u0026#34;T01\u0026#34; List and Filter All Tasks 1 backlog list By Status 1 backlog list --status \u0026#34;in-progress\u0026#34; By Assignee 1 backlog list --assignee \u0026#34;alice\u0026#34; Subtasks 1 backlog list --parent \u0026#34;T01\u0026#34; View and Edit View Details 1 backlog view T01 Update Status 1 backlog edit T01 --status \u0026#34;done\u0026#34; Add Assignee 1 backlog edit T01 --add-assignee \u0026#34;bob\u0026#34; Add Labels 1 backlog edit T01 --add-label \u0026#34;urgent\u0026#34; Search and Archive Search Content 1 backlog search \u0026#34;authentication\u0026#34; Archive Task 1 backlog archive T01 AI Integration STDIO Transport 1 backlog mcp HTTP Transport 1 backlog mcp --http --port 8106 Global Options Tip All commands support these global options: --help, -h: Show help information --version: Show version information Output Formats Many commands support multiple output formats:\nTable (default): Human-readable table format JSON: Machine-readable JSON format Markdown: Markdown format for documentation 1 2 backlog list --format json backlog view T01 --format markdown Task ID Format Note Tasks use hierarchical IDs with dot notation: T01 - Root task T01.01 - Subtask of T01 T01.01.01 - Sub-subtask of T01.01 IDs are automatically assigned when creating tasks, or you can specify a parent with the -p flag.\nFile Structure Tasks are stored as Markdown files in the .backlog/ directory:\n.backlog/ ├── T01-implement_auth.md ├── T01.01-oauth_setup.md ├── T02-frontend_work.md └── archived/ └── T03-completed_task.md Tip Each command in this reference includes detailed usage information, examples, and available options. ","description":" CLI Reference Complete command-line interface documentation for the backlog tool.\nOverview Backlog provides a comprehensive CLI for managing tasks with the following commands:\nCore Commands backlog - Main command with global options backlog create - Create new tasks backlog list - List and filter tasks backlog view - View task details backlog edit - Edit existing tasks Additional Commands backlog search - Search tasks by content backlog archive - Archive completed tasks backlog mcp - Start MCP server for AI agents backlog version - Show version information Quick Examples Create Tasks Simple Task 1 backlog create \u0026#34;Fix login bug\u0026#34; With Metadata 1 2 3 4 5 6 7 backlog create \u0026#34;Implement OAuth\u0026#34; \\ -d \u0026#34;Add Google and GitHub OAuth support\u0026#34; \\ -a \u0026#34;alice,bob\u0026#34; \\ -l \u0026#34;auth,feature\u0026#34; \\ --priority \u0026#34;high\u0026#34; \\ --ac \u0026#34;Google OAuth works\u0026#34; \\ --ac \u0026#34;GitHub OAuth works\u0026#34; Subtask 1 backlog create \u0026#34;OAuth token validation\u0026#34; -p \u0026#34;T01\u0026#34; List and Filter All Tasks 1 backlog list By Status 1 backlog list --status \u0026#34;in-progress\u0026#34; By Assignee 1 backlog list --assignee \u0026#34;alice\u0026#34; Subtasks 1 backlog list --parent \u0026#34;T01\u0026#34; View and Edit View Details 1 backlog view T01 Update Status 1 backlog edit T01 --status \u0026#34;done\u0026#34; Add Assignee 1 backlog edit T01 --add-assignee \u0026#34;bob\u0026#34; Add Labels 1 backlog edit T01 --add-label \u0026#34;urgent\u0026#34; Search and Archive Search Content 1 backlog search \u0026#34;authentication\u0026#34; Archive Task 1 backlog archive T01 AI Integration STDIO Transport 1 backlog mcp HTTP Transport 1 backlog mcp --http --port 8106 Global Options Tip All commands support these global options: --help, -h: Show help information --version: Show version information Output Formats Many commands support multiple output formats:\n"},{"id":13,"href":"/backlog/ai-integration/","title":"AI Integration","parent":"Backlog","content":" AI Integration Backlog includes a Model Context Protocol (MCP) server that exposes task management capabilities to AI agents, making it exceptionally well-suited for AI-assisted development workflows.\nWhy AI Integration? Important The context window deteriorates rapidly on large-scale projects. A proven workaround is to ask AI agents to \u0026ldquo;make a plan for X, write it to a markdown file and keep it updated with the ongoing tasks\u0026rdquo;. This technique has worked incredibly well, making refactoring and other significant code changes more resilient to failures, retries, or rate-limiting from the model.\nBacklog provides a structured MCP server that AI tools can understand and trust to handle these details, providing a much better experience when using AI tools for complex tasks.\nStarting the MCP Server STDIO Transport (Default) 1 2 # Start MCP server using STDIO transport backlog mcp This is the standard transport method for most AI agents.\nHTTP Transport 1 2 # Start MCP server using HTTP transport backlog mcp --http --port 8106 Use HTTP transport for web-based AI agents or custom integrations.\nAvailable MCP Tools The MCP server exposes the following tools to AI agents:\ntask_create ↕ Create new tasks with full metadata support.\nParameters:\ntitle (required): Task title description: Detailed description priority: Task priority (low, medium, high) parent: Parent task ID for hierarchical structure assigned: List of assignees labels: List of labels ac: List of acceptance criteria Example usage by AI agent:\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;tool\u0026#34;: \u0026#34;task_create\u0026#34;, \u0026#34;arguments\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Implement user authentication\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Add login and registration functionality\u0026#34;, \u0026#34;priority\u0026#34;: \u0026#34;high\u0026#34;, \u0026#34;assigned\u0026#34;: [\u0026#34;alice\u0026#34;, \u0026#34;bob\u0026#34;], \u0026#34;labels\u0026#34;: [\u0026#34;feature\u0026#34;, \u0026#34;auth\u0026#34;, \u0026#34;backend\u0026#34;], \u0026#34;ac\u0026#34;: [\u0026#34;Login form validates input\u0026#34;, \u0026#34;Registration creates user account\u0026#34;, \u0026#34;Password reset works\u0026#34;] } } task_list ↕ List and filter tasks with various criteria.\nParameters:\nstatus: Filter by status (todo, in-progress, done) assigned: Filter by assignee parent: Filter by parent task ID labels: Filter by labels unassigned: Show only unassigned tasks task_view ↕ Get detailed information about a specific task.\nParameters:\nid (required): Task ID to view task_edit ↕ Update existing tasks with field-specific modifications.\nParameters:\nid (required): Task ID to edit new_status: Update task status new_title: Update task title new_description: Update task description new_priority: Update task priority add_assigned: Add assignees remove_assigned: Remove assignees add_labels: Add labels remove_labels: Remove labels check_ac: Mark acceptance criteria as complete (by index) uncheck_ac: Mark acceptance criteria as incomplete task_search ↕ Search tasks by content across titles and descriptions.\nParameters:\nquery (required): Search query string task_archive ↕ Archive completed tasks (moves them to archived directory).\nParameters:\nid (required): Task ID to archive AI Agent Configuration Examples Claude Code (.claude) 1 2 3 4 5 6 7 8 { \u0026#34;mcpServers\u0026#34;: { \u0026#34;backlog\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;backlog\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;mcp\u0026#34;] } } } Gemini (.gemini) 1 2 3 4 5 6 7 8 { \u0026#34;tools\u0026#34;: { \u0026#34;backlog\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;mcp\u0026#34;, \u0026#34;command\u0026#34;: [\u0026#34;backlog\u0026#34;, \u0026#34;mcp\u0026#34;] } } } VSCode (.vscode/settings.json) 1 2 3 4 5 6 7 8 9 { \u0026#34;mcp.servers\u0026#34;: { \u0026#34;backlog\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;backlog\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;mcp\u0026#34;], \u0026#34;env\u0026#34;: {} } } } Common AI Workflows Project Planning Prompt Example Analyze this codebase and create a comprehensive refactoring plan. Break it down into tasks using the backlog tools, with proper hierarchical structure and acceptance criteria. The AI will:\nUse task_create to create a main refactoring task Break it down into subtasks with parent relationships Add detailed acceptance criteria for each task Assign priorities and labels Task Management Prompt Example Review my current backlog and update the status of completed tasks. Move finished items to the archive. The AI will:\nUse task_list to get current tasks Use task_edit to update statuses Use task_archive to archive completed tasks Progress Tracking Prompt Example Show me the current status of the authentication feature and create subtasks for any missing work. The AI will:\nUse task_search to find authentication-related tasks Use task_view to get detailed task information Create new subtasks as needed Best Practices For Humans Working with AI Agents Be Specific: Provide clear context about what you want the AI to plan or track Use Hierarchical Structure: Ask AI to break large features into manageable subtasks Include Acceptance Criteria: Request specific, testable criteria for each task Regular Updates: Ask AI to review and update task statuses periodically For AI Agents Break Down Complex Tasks: Create hierarchical task structures for better organization Use Descriptive Titles: Make task titles clear and actionable Add Context: Include detailed descriptions and acceptance criteria Update Regularly: Keep task statuses current as work progresses Example AI Prompts Initial Project Setup ↕ I\u0026#39;m starting a new web application project. Create a comprehensive development backlog with tasks for: - Project setup and configuration - Database design and setup - User authentication system - Core application features - Testing and deployment Use hierarchical task structure with acceptance criteria for each task. Feature Implementation ↕ I need to implement a payment processing feature. Create tasks for: - Payment gateway integration - Transaction handling - Error handling and retry logic - Security considerations - Testing Make sure each task has specific acceptance criteria and proper priorities. Code Review and Refactoring ↕ Review the current codebase and create a refactoring plan. Focus on: - Code organization and structure - Performance improvements - Security enhancements - Documentation gaps Create tasks with realistic time estimates and dependencies. Troubleshooting MCP Server Not Starting ↕ Check Binary: Ensure backlog is in your PATH Verify Installation: Run backlog version to confirm installation Check Permissions: Ensure the binary has execute permissions AI Agent Can\u0026#39;t Connect ↕ Transport Type: Verify you\u0026rsquo;re using the correct transport (STDIO vs HTTP) Configuration: Check your AI agent\u0026rsquo;s MCP configuration Logs: Check agent logs for connection errors Tasks Not Creating ↕ Git Repository: Ensure you\u0026rsquo;re in a Git repository Permissions: Check write permissions for .backlog/ directory Disk Space: Ensure sufficient disk space for task files Note For more troubleshooting help, see the Development Guide or file an issue on GitHub. ","description":" AI Integration Backlog includes a Model Context Protocol (MCP) server that exposes task management capabilities to AI agents, making it exceptionally well-suited for AI-assisted development workflows.\nWhy AI Integration? Important The context window deteriorates rapidly on large-scale projects. A proven workaround is to ask AI agents to \u0026ldquo;make a plan for X, write it to a markdown file and keep it updated with the ongoing tasks\u0026rdquo;. This technique has worked incredibly well, making refactoring and other significant code changes more resilient to failures, retries, or rate-limiting from the model.\n"},{"id":14,"href":"/backlog/development/","title":"Development","parent":"Backlog","content":" Development Resources for developers who want to understand, contribute to, or extend the Backlog project.\nOverview This section contains technical documentation about the Backlog project\u0026rsquo;s architecture, implementation details, and development processes.\nTechnical Documentation Technical Analysis - Comprehensive analysis of the codebase, architecture, and implementation patterns Project Plan - Detailed recreation plan with development phases and acceptance criteria Architecture Guide - System design and architectural decisions Contributing Resources Getting Started - Basic usage and installation GitHub Repository - Source code and issues CLI Reference - Complete command documentation Contributing Tip Backlog is designed to be simple and focused. Before contributing: Read the Technical Analysis to understand the current architecture Review the Project Plan to see the intended direction Check existing issues on GitHub Development Environment Quick Start 1 2 3 4 5 6 # Clone the repository git clone https://github.com/veggiemonk/backlog cd backlog # Build the project make build Testing 1 2 3 4 5 # Run tests make test # Run with coverage make cover Documentation 1 2 3 4 5 # Generate CLI documentation make docs # Serve documentation locally hugo server Quality 1 2 3 4 5 # Lint code make lint # Format code go fmt ./... Architecture Principles Design Philosophy File-based storage: Tasks as Markdown files with YAML frontmatter Interface-driven design: TaskStore interface with filesystem abstraction Git integration: Automatic commits for all operations Zero configuration: Works immediately without setup Technical Approach MCP integration: AI agent compatibility through Model Context Protocol Clean separation: Core business logic separate from CLI and MCP server Dependency injection: Testable design with afero filesystem mocking Modern Go: Go 1.21+ with contemporary idioms and patterns Code Quality Standards Testing Requirements ↕ Comprehensive test coverage using afero filesystem mocking Unit tests for all core business logic Integration tests for CLI commands MCP server functionality tests Tests run against in-memory filesystems for isolation Code Style ↕ Go 1.21+ with modern idioms Clean separation of concerns (core, CLI, MCP server) Interface-driven design for testability Consistent error handling patterns Meaningful variable and function names Documentation ↕ All public APIs documented with Go doc comments CLI commands auto-generated with Cobra Architecture decisions recorded in technical analysis Examples provided for common use cases Project Structure backlog/ ├── main.go # Entry point ├── internal/ │ ├── core/ # Business logic and data structures │ ├── cmd/ # CLI commands (Cobra) │ ├── mcp/ # MCP server implementation │ ├── commit/ # Git integration │ └── logging/ # Logging configuration ├── content/ # Documentation (Hugo) ├── .backlog/ # Example backlog tasks └── dist/ # Release artifacts Design Philosophy Core Principles Simplicity: Handle fewer use cases well rather than many use cases poorly.\nAI-Friendly: Designed from the ground up to work seamlessly with AI agents through MCP integration.\nDeveloper-Centric: Built by developers, for developers, with a focus on transparency and control.\nOffline-First: Everything works locally without external dependencies or cloud services.\nGetting Help Community Resources Issues: GitHub Issues Discussions: GitHub Discussions Source Code: GitHub Repository Documentation User Guide: Getting Started AI Integration: MCP Setup API Reference: CLI Commands ","description":" Development Resources for developers who want to understand, contribute to, or extend the Backlog project.\nOverview This section contains technical documentation about the Backlog project\u0026rsquo;s architecture, implementation details, and development processes.\nTechnical Documentation Technical Analysis - Comprehensive analysis of the codebase, architecture, and implementation patterns Project Plan - Detailed recreation plan with development phases and acceptance criteria Architecture Guide - System design and architectural decisions Contributing Resources Getting Started - Basic usage and installation GitHub Repository - Source code and issues CLI Reference - Complete command documentation Contributing Tip Backlog is designed to be simple and focused. Before contributing: Read the Technical Analysis to understand the current architecture Review the Project Plan to see the intended direction Check existing issues on GitHub Development Environment Quick Start 1 2 3 4 5 6 # Clone the repository git clone https://github.com/veggiemonk/backlog cd backlog # Build the project make build Testing 1 2 3 4 5 # Run tests make test # Run with coverage make cover Documentation 1 2 3 4 5 # Generate CLI documentation make docs # Serve documentation locally hugo server Quality 1 2 3 4 5 # Lint code make lint # Format code go fmt ./... Architecture Principles Design Philosophy File-based storage: Tasks as Markdown files with YAML frontmatter Interface-driven design: TaskStore interface with filesystem abstraction Git integration: Automatic commits for all operations Zero configuration: Works immediately without setup Technical Approach MCP integration: AI agent compatibility through Model Context Protocol Clean separation: Core business logic separate from CLI and MCP server Dependency injection: Testable design with afero filesystem mocking Modern Go: Go 1.21+ with contemporary idioms and patterns Code Quality Standards Testing Requirements ↕ Comprehensive test coverage using afero filesystem mocking Unit tests for all core business logic Integration tests for CLI commands MCP server functionality tests Tests run against in-memory filesystems for isolation Code Style ↕ Go 1.21+ with modern idioms Clean separation of concerns (core, CLI, MCP server) Interface-driven design for testability Consistent error handling patterns Meaningful variable and function names Documentation ↕ All public APIs documented with Go doc comments CLI commands auto-generated with Cobra Architecture decisions recorded in technical analysis Examples provided for common use cases Project Structure backlog/ ├── main.go # Entry point ├── internal/ │ ├── core/ # Business logic and data structures │ ├── cmd/ # CLI commands (Cobra) │ ├── mcp/ # MCP server implementation │ ├── commit/ # Git integration │ └── logging/ # Logging configuration ├── content/ # Documentation (Hugo) ├── .backlog/ # Example backlog tasks └── dist/ # Release artifacts Design Philosophy Core Principles Simplicity: Handle fewer use cases well rather than many use cases poorly.\n"},{"id":15,"href":"/backlog/about/","title":"About","parent":"Backlog","content":" About Backlog Project Background Note The context window deteriorates rapidly on large-scale projects. A workaround many developers have found is to ask AI agents to \u0026ldquo;make a plan for X, write it to a markdown file and keep it updated with the ongoing tasks\u0026rdquo;. This technique has worked incredibly well, making refactoring and other significant code changes more resilient to failures, retries, or rate-limiting from AI models.\nHowever, this approach often cluttered repository root directories with files like plan.md or refactor_this_big_codebase.md. To solve this problem, Backlog was created as an MCP server that developers could understand and trust to handle these details, providing a much better experience when using AI tools for complex tasks.\nPhilosophy Simplicity Over Features Backlog aims to handle fewer use cases well rather than many use cases poorly. It focuses on the core workflow of task management for developer-AI collaboration.\nAI-First Design Unlike traditional task managers designed for humans first, Backlog was designed from the ground up to work seamlessly with AI agents while still being useful for human developers.\nTransparency Everything is stored as human-readable Markdown files in Git. No databases, no proprietary formats, no lock-in.\nDeveloper Control You own your data completely. Everything lives in your Git repository and can be edited manually if needed.\nDevelopment Story AI-Assisted Development While this codebase is mostly hand-written, the documentation, comments, examples, and some tests were generated with AI assistance. The author found that AI agents yield better results when:\nThe project structure is already established exactly as desired The libraries and dependencies are already chosen and configured The code style and patterns are already defined consistently After establishing these foundations, AI assistance becomes much more effective for implementation details.\nTools Used The project was developed using several AI tools (all paid tier):\nPrimary Tools gemini-2.5-pro - Primary development assistance claude-sonnet4 - Code review and documentation Supporting Tools github-copilot - Code completion and suggestions amp - Additional AI assistance Inspiration This project is inspired by:\nBacklog.md ↕ Backlog.md - Simple markdown-based task tracking that demonstrated the power of storing tasks as plain markdown files. TaskWing ↕ TaskWing - CLI task management that showed how effective command-line interfaces can be for developer workflows. But Backlog aims to be simpler while being specifically optimized for AI-friendly workflows.\nMCP Server Resources For MCP server implementation, excellent examples can be found in:\ngo-sdk - Official Go SDK for MCP servers GoogleCloudPlatform/gke-mcp - Production MCP server example Example Usage Tip You can see Backlog in action by examining the .backlog folder in this repository, which contains the actual tasks used to develop this project. The backlog was generated using this prompt:\nDetails If you were to recreate this project from scratch, make a plan and break it down into tasks using backlog break down prompt. Write that plan to a markdown file called \u0026#34;./docs/plan.md\u0026#34;. Check that the plan in ./docs/plan.md is consistent with the list of tasks in the backlog. Add implementation plan to relevant tasks All tasks should have at least one acceptance criteria. Read the full instructions for backlog: ./internal/mcp/prompt.md Contributing Getting Started Backlog is open source and welcomes contributions. See the Development Guide for technical details.\nResources Repository: github.com/veggiemonk/backlog Issues: GitHub Issues Discussions: GitHub Discussions Quick Links Getting Started - Installation and basic usage CLI Reference - Complete command documentation AI Integration - MCP setup guide License This project is released under the MIT License. See the LICENSE file in the repository for details.\nContact Project Details Repository: github.com/veggiemonk/backlog Issues: GitHub Issues Author: veggiemonk Documentation User Guide: Getting Started Technical Docs: Development API Reference: CLI Commands Project Mission \u0026ldquo;The goal is to provide a frictionless collaboration between AI agents and developers\u0026rdquo; ","description":" About Backlog Project Background Note The context window deteriorates rapidly on large-scale projects. A workaround many developers have found is to ask AI agents to \u0026ldquo;make a plan for X, write it to a markdown file and keep it updated with the ongoing tasks\u0026rdquo;. This technique has worked incredibly well, making refactoring and other significant code changes more resilient to failures, retries, or rate-limiting from AI models.\n"},{"id":16,"href":"/backlog/","title":"Backlog","parent":"","content":" Get Started GitHub Zero-configuration task manager for developers and AI agents Backlog is a task manager written in Go where tasks live inside a Git repository. It leverages plain Markdown files for task storage and a comprehensive command-line interface (CLI) for interaction. This design makes it exceptionally well-suited for AI agents thanks to its MCP (Model Context Protocol) integration.\nFeatures Task Management: Create, edit, list, and view tasks with rich metadata Hierarchical Structure: Support for parent-child-grandchild task relationships (T01 → T01.01 → T01.01.01) Search \u0026amp; Filter: Find tasks by content, status, parent relationships, and labels AI-Friendly: MCP server integration for seamless AI agent collaboration Benefits Git Integration: Tasks are stored as Markdown files with automatic Git commits Offline-First: Works completely offline with local Git repository storage Portable: Entire project state contained within the Git repository Zero Configuration: No setup files or databases required Quick Start Installation From Source 1 2 3 git clone https://github.com/veggiemonk/backlog cd backlog go build . Go Install 1 go install github.com/veggiemonk/backlog@latest Download Binary Download the latest binary from the releases page. Basic Usage 1 2 3 4 5 6 7 8 9 10 11 12 13 # Create a simple task backlog create \u0026#34;Fix the login button styling\u0026#34; # Create task with metadata backlog create \u0026#34;Implement password reset\u0026#34; \\ -d \u0026#34;Users should be able to request a password reset link via email\u0026#34; \\ -a \u0026#34;alex\u0026#34; -l \u0026#34;backend,security\u0026#34; --priority \u0026#34;high\u0026#34; # List all tasks backlog list # View specific task backlog view T01 AI Agent Integration Start the MCP server to enable AI agent interaction:\n1 2 3 # Start MCP server for AI agents backlog mcp --http --port 8106 # HTTP transport backlog mcp # STDIO transport (default) AI agents can then:\nCreate tasks from conversation context Break down large tasks into subtasks Update task status and assignments Search and analyze task patterns Why Backlog? Note For Humans: The context window deteriorates rapidly on large-scale projects. A workaround is to ask AI agents to \u0026ldquo;make a plan for X, write it to a markdown file and keep it updated with the ongoing tasks\u0026rdquo;. This technique has worked incredibly well, making refactoring and other significant code changes more resilient to failures. Tip For AI Agents: Backlog provides a structured MCP server that AI tools can understand and trust to handle task management details, providing a much better experience when using AI tools for complex tasks. ","description":" Get Started GitHub Zero-configuration task manager for developers and AI agents Backlog is a task manager written in Go where tasks live inside a Git repository. It leverages plain Markdown files for task storage and a comprehensive command-line interface (CLI) for interaction. This design makes it exceptionally well-suited for AI agents thanks to its MCP (Model Context Protocol) integration.\nFeatures Task Management: Create, edit, list, and view tasks with rich metadata Hierarchical Structure: Support for parent-child-grandchild task relationships (T01 → T01.01 → T01.01.01) Search \u0026amp; Filter: Find tasks by content, status, parent relationships, and labels AI-Friendly: MCP server integration for seamless AI agent collaboration Benefits Git Integration: Tasks are stored as Markdown files with automatic Git commits Offline-First: Works completely offline with local Git repository storage Portable: Entire project state contained within the Git repository Zero Configuration: No setup files or databases required Quick Start Installation From Source 1 2 3 git clone https://github.com/veggiemonk/backlog cd backlog go build . Go Install 1 go install github.com/veggiemonk/backlog@latest Download Binary Download the latest binary from the releases page. Basic Usage 1 2 3 4 5 6 7 8 9 10 11 12 13 # Create a simple task backlog create \u0026#34;Fix the login button styling\u0026#34; # Create task with metadata backlog create \u0026#34;Implement password reset\u0026#34; \\ -d \u0026#34;Users should be able to request a password reset link via email\u0026#34; \\ -a \u0026#34;alex\u0026#34; -l \u0026#34;backend,security\u0026#34; --priority \u0026#34;high\u0026#34; # List all tasks backlog list # View specific task backlog view T01 AI Agent Integration Start the MCP server to enable AI agent interaction:\n"},{"id":17,"href":"/backlog/categories/","title":"Categories","parent":"Backlog","content":"","description":""},{"id":18,"href":"/backlog/tags/","title":"Tags","parent":"Backlog","content":"","description":""}]